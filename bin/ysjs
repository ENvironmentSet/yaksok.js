#!/usr/bin/env node
var yaksok = require('../dist/yaksok.min.js');
var fs = require('fs');
var path = require('path');
var argv = require('yargs')
    .usage([
        '사용법: ysjs <소스코드> [설정]',
        '`ysjs`만 입력하면 repl 모드로 동작합니다'
    ].join('\n'))
    .example('ysjs', '약속 repl을 실행합니다')
    .example('ysjs -h', '이 도움말을 보여줍니다')
    .example('ysjs "소스코드.yak" -o "결과.js"', '"소스코드.yak" 파일을 "결과.js"로 컴파일합니다')
    .help('h')
    .options({
        h: {
            alias: 'help',
            describe: '이 도움말을 보여줍니다',
            type: 'boolean'
        },
        o: {
            alias: 'out',
            describe: '결과 파일 또는 경로를 지정합니다',
            default: 'out',
            type: 'string'
        },
        t: {
            alias: 'target',
            describe: '컴파일 타겟을 지정합니다',
            default: 'js',
            type: 'string'
        },
    })
    .argv;

process.title = 'ysjs';

if (argv._.length === 0) {
    console.error('repl은 아직 지원되지 않습니다.');
    process.exit(1);
} else {
    var filePath = argv._[0];
    var entryContext = new yaksok.context.CommonContext(
        path.basename(filePath, '.yak'),
        path.dirname(filePath)
    );
    switch (argv.target) {
    case 'js': case 'javascript': {
        var compiler = new yaksok.impl.JsTargetCompiler();
        compiler.plugins.add(new yaksok.plugin.ConstantFolder({ dce: true }));
        compiler.compile(entryContext).then(function (result) {
            fs.writeFileSync(argv.out, result, { encoding: 'utf8' });
        }).catch(function (err) {
            console.error(err instanceof Error ? err.stack : err);
            process.exit(1);
        });
    } break;
    default: {
        console.error('지원하지 않는 컴파일 타겟입니다.');
        process.exit(1);
    } break;
    }
}
