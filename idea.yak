# 정적타입 약속

# `아무`타입은 모든 종류의 값을 취급 가능.
# `(인자)`는 `(아무 인자)`와 동일하다고 간주.

# 아무 타입의 값 반환
약속 (부동소수점 숫자1)와/과 (부동소수점 숫자2)을/를 더하기/더하고
    결과: 숫자1 + 숫자2

# 반환타입 명시
논리대수 약속 (논리대수 숫자1)와/과 (논리대수 숫자2)을/를 더하기/더하고
    결과: 숫자1 | 숫자2

부동소수점 값1: 1
부동소수점 값2: '2' # 타입에러
문자열 값3: '3'
논리대수 값4: 참
논리대수 값5: 거짓
논리대수 값6: 값4와 값5를 더하기

(값1과 1을 더하고) 보여주기 # 2

# 일치하는 타입의 약속 정의가 없으면
(값1과 값3을 더하고) 보여주기 # 에러

# 타입캐스팅
(값1과 (<부동소수점> 값3)을 더하고) 보여주기 # '13'

(값4와 값5를 더하고) 보여주기 # 참




# 타입 정의

# 열거형
종류 과일
    복숭아
    포도
    딸기
    사과
    수박
    배
    망고
    바나나

과일 아까먹은것: 복숭아
지금먹는것: <과일> 망고

종류 색상
    RGBA: (부동소수점 R) (부동소수점 G) (부동소수점 B) (부동소수점 A)
    HSL: (부동소수점 H) (부동소수점 S) (부동소수점 L)

색상 하얀색: RGBA <- [1, 1, 1, 1]
검정색: <색상> HSL <- [0, 0, 0]

약속 hex(값)
    결과: 'ff' # 짜기 귀찮아

약속 (색상 색) 보여주기
    맞춤 색
        RGBA
            '#' + (hex R) + (hex G) + (hex B) 보여주기
        HSL
            'hsl(' + H + ',' + (S * 100) + '%,' + (L * 100) + '%)' 보여주기

하얀색 보여주기 # '#ffffff'
검정색 보여주기 # 'hsl(0,0%,0%)'

# 구조체
구조 자동차
    차체 # 엔진과 동일한 값(`()`)으로 초기화됨
    엔진: ()
    바퀴: '초기값'

내차: 자동차 생성




# 람다
약속 (인자1) (인자2) (인자3) # 에러: 이름이 없는 약속 문장은 정의할 수 없음
    약속내용

약속 (목록)의 첫번째 값
    결과: 목록[1]
번역(js) (목록)의 끝에서 하나 빼기
***
    return 목록.pop();
***
번역(js) (목록) 복사
***
    return 목록.concat();
***

내용전부더하기: 약속 (인자) # 대체할 이름을 적어주는 경우에 한해서,
                            # 이름없는 약속을 정의할 수 있음
    만약 인자.길이 < 2 이면
        결과: 인자의 첫번째 값
    아니라면
        인자: 인자 복사
        # 람다는 `람다 <- [인자1, 인자2, 인자3, ...]`의 꼴로 호출
        결과: (인자의 끝에서 하나 빼기) + 내용전부더하기 <- [인자]




# 모듈시스템

모듈 '트위터.약속'을 트위터로 사용
모듈 'facebook.yak'를 페이스북으로 사용

트위터토큰: ()
내보내는 약속 트위터 토큰 (토큰)
    바깥 트위터토큰
    트위터토큰: 토큰

페이스북토큰: ()
내보내는 약속 페이스북 토큰 (토큰)
    바깥 페이스북토큰
    페이스북토큰: 토큰

내보내는 약속 트위터와 페이스북에 (내용)라고/이라고 글쓰기
    @트위터 트위터토큰으로 내용이라고 트윗하기
    @페이스북 페이스북토큰으로 내용이라고 게시하기
